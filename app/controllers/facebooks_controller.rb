require 'rack/oauth2'
require 'authentication'

class FacebooksController < ApplicationController
  include Authentication

  layout 'facebook'
  before_filter :require_authentication, :only => :destroy
  before_filter :get_account, :only=>[:new]
  
  rescue_from FbGraph::Exception, :with => :fb_graph_exception

  helper_method :authenticated?
  
  def fb_graph_exception(e)
    flash[:error] = {
      :title   => e.class,
      :message => e.message
    }
    current_user.try(:destroy)
    redirect_to root_url
  end
  
  rescue_from Rack::OAuth2::Client::Error, :with => :oauth2_error

  def index
    if session[:email]
      email="email='#{session[:email]}'"
    else
      email=""
    end
    @uri = URI.parse Facebook.config[:canvas_url]
    records = ApiToken.includes(:facebook_account).
      where("canvas_url='#{@uri.host}'").
      where(email).
      references(:facebook_account).to_a
     
    @accounts = []
    hsh = Hash.new {|h,k| h[k] = [] }
    # deduplicate account_id
    # each account_id appears max 2 times
    records.each do |a|
      if hsh[a.account_id].size == 0
        hsh[a.account_id] << a.account_id
        @accounts << a
      end
    end
    @user = @accounts[0].api_user_email rescue "N/A"
    @token_count = ApiToken.where("app_user_email='#{@user}' and page_access_token is not null").
       group("account_id").to_a.size
  end
  
  def edit
    email="email='#{params[:email]}'"
    session[:email] = email
    records = FacebookAccount).where(email).to_a
  
    @accounts = []
    hsh = Hash.new {|h,k| h[k] = [] }
    records.each do |a|
      if hsh[a.account_id].size == 0
        hsh[a.account_id] << a.account_id
        @accounts << a
      end
    end
    @user = @accounts[0].email rescue "N/A"
    @token_count = FacebookAccount.where("email='#{@user}' and page_access_token is not null").
       group("account_id").to_a.size
    render :partial=>"account"
  end
  
  # handle Facebook Auth Cookie generated by JavaScript SDK
  def show
    auth = Facebook.auth.from_cookie(cookies)
    authenticate Facebook.identify(auth.user)
    redirect_to '/facebooks/index'
  end

  # handle Normal OAuth flow: start
  def new
    client = Facebook.auth(callback_facebook_url).client
    redirect_to client.authorization_uri(
      :scope => Facebook.config[:scope]
    )
  end

  # handle Normal OAuth flow: callback
  def create
    client = Facebook.auth(callback_facebook_url).client
    uri = URI.parse client.redirect_uri
    client.authorization_code = params[:code]
    access_token = client.access_token! :client_auth_body
    user = FbGraph::User.me(access_token).fetch
    authenticate Facebook.identify(user)
    if session[:account_id]
      app = FacebookAccount.find_by account_id: session[:account_id]
      if app
        app.update_attribute :user_access_token, access_token.access_token
        app.exchange_page_access_token
        
        app.facebook_account.update_attributes :user_access_token=>access_token.access_token,
          :page_access_token=>app.page_access_token

        # update other account sharing the same email
        FacebookAccount.where("id != #{app.id}").
          where("email='#{app.email}'").to_a.each do |a|
            a.exchange_page_access_token access_token.access_token
          end
        end
      end
    end
    redirect_to '/facebooks/index' # dashboard_url
  end

  def destroy
    unauthenticate
    redirect_to root_url
  end

  private

  def get_account
    @account = Account.find_by_id params[:account][:name]
    email=params[:account][:email]
    if email
      session[:email] = email
    else
      uri = URI.parse Facebook.config[:canvas_url]
      email=ApiToken.find_by canvas_url: uri.host
      session[:email] = email.api_user_email
    end
    if @account
      session[:account_id] = @account.id
      Facebook.account = @account
    else
      Facebook.account = nil
      session[:account_id] = nil
    end
  end
  
  def oauth2_error(e)
    flash[:error] = {
      :title => e.response[:error][:type],
      :message => e.response[:error][:message]
    }
    redirect_to root_url
  end
end
